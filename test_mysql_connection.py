#!/usr/bin/env python3
"""
Script mejorado para verificar la conexi√≥n a MySQL y el estado de la base de datos.
"""

import sys
import os
import mysql.connector
from mysql.connector import Error
from dotenv import load_dotenv

# Cargar variables de entorno
load_dotenv('config.env')

def test_mysql_connection():
    """Prueba la conexi√≥n b√°sica a MySQL."""
    print("üîå Probando conexi√≥n b√°sica a MySQL...")
    
    try:
        connection = mysql.connector.connect(
            host=os.getenv('DB_HOST', 'localhost'),
            user=os.getenv('DB_USER', 'root'),
            password=os.getenv('DB_PASSWORD', ''),
            port=int(os.getenv('DB_PORT', 3306))
        )
        
        if connection.is_connected():
            cursor = connection.cursor()
            cursor.execute("SELECT VERSION()")
            version = cursor.fetchone()
            print(f"‚úÖ Conexi√≥n exitosa a MySQL versi√≥n: {version[0]}")
            
            cursor.close()
            connection.close()
            return True
        else:
            print("‚ùå No se pudo establecer conexi√≥n")
            return False
            
    except Error as e:
        print(f"‚ùå Error de conexi√≥n: {e}")
        return False

def test_database_exists():
    """Verifica si la base de datos existe."""
    print("\nüìä Verificando existencia de la base de datos...")
    
    try:
        connection = mysql.connector.connect(
            host=os.getenv('DB_HOST', 'localhost'),
            user=os.getenv('DB_USER', 'root'),
            password=os.getenv('DB_PASSWORD', ''),
            port=int(os.getenv('DB_PORT', 3306))
        )
        
        if connection.is_connected():
            cursor = connection.cursor()
            db_name = os.getenv('DB_NAME', 'bienestaremocional')
            cursor.execute(f"SHOW DATABASES LIKE '{db_name}'")
            result = cursor.fetchone()
            
            if result:
                print(f"‚úÖ Base de datos '{db_name}' existe")
                cursor.close()
                connection.close()
                return True
            else:
                print(f"‚ùå Base de datos '{db_name}' no existe")
                cursor.close()
                connection.close()
                return False
                
    except Error as e:
        print(f"‚ùå Error verificando base de datos: {e}")
        return False

def test_database_connection():
    """Prueba la conexi√≥n a la base de datos espec√≠fica."""
    print("\nüóÑÔ∏è Probando conexi√≥n a la base de datos espec√≠fica...")
    
    try:
        connection = mysql.connector.connect(
            host=os.getenv('DB_HOST', 'localhost'),
            database=os.getenv('DB_NAME', 'bienestaremocional'),
            user=os.getenv('DB_USER', 'root'),
            password=os.getenv('DB_PASSWORD', ''),
            port=int(os.getenv('DB_PORT', 3306))
        )
        
        if connection.is_connected():
            cursor = connection.cursor()
            
            # Verificar tablas
            cursor.execute("SHOW TABLES")
            tables = cursor.fetchall()
            
            print(f"‚úÖ Conectado a la base de datos")
            print(f"üìã Tablas encontradas: {len(tables)}")
            
            expected_tables = ['usuarios', 'surveys', 'questions', 'survey_responses', 'question_answers']
            missing_tables = []
            
            for table in expected_tables:
                table_exists = any(table in str(t) for t in tables)
                if table_exists:
                    print(f"   ‚úÖ {table}")
                else:
                    print(f"   ‚ùå {table} (FALTANTE)")
                    missing_tables.append(table)
            
            cursor.close()
            connection.close()
            
            if missing_tables:
                print(f"\n‚ö†Ô∏è Tablas faltantes: {', '.join(missing_tables)}")
                return False
            else:
                print("\n‚úÖ Todas las tablas est√°n presentes")
                return True
                
    except Error as e:
        print(f"‚ùå Error conectando a la base de datos: {e}")
        return False

def test_data_integrity():
    """Verifica la integridad de los datos."""
    print("\nüîç Verificando integridad de datos...")
    
    try:
        connection = mysql.connector.connect(
            host=os.getenv('DB_HOST', 'localhost'),
            database=os.getenv('DB_NAME', 'bienestaremocional'),
            user=os.getenv('DB_USER', 'root'),
            password=os.getenv('DB_PASSWORD', ''),
            port=int(os.getenv('DB_PORT', 3306))
        )
        
        if connection.is_connected():
            cursor = connection.cursor()
            
            # Contar registros en cada tabla
            tables_to_check = ['usuarios', 'surveys', 'questions', 'survey_responses', 'question_answers']
            
            for table in tables_to_check:
                try:
                    cursor.execute(f"SELECT COUNT(*) FROM {table}")
                    count = cursor.fetchone()[0]
                    print(f"   üìä {table}: {count} registros")
                except Error as e:
                    print(f"   ‚ùå Error en tabla {table}: {e}")
            
            cursor.close()
            connection.close()
            return True
            
    except Error as e:
        print(f"‚ùå Error verificando integridad: {e}")
        return False

def show_configuration():
    """Muestra la configuraci√≥n actual."""
    print("‚öôÔ∏è Configuraci√≥n actual:")
    print(f"   Host: {os.getenv('DB_HOST', 'localhost')}")
    print(f"   Base de datos: {os.getenv('DB_NAME', 'bienestaremocional')}")
    print(f"   Usuario: {os.getenv('DB_USER', 'root')}")
    print(f"   Puerto: {os.getenv('DB_PORT', 3306)}")
    print(f"   Contrase√±a: {'***' if os.getenv('DB_PASSWORD') else '(vac√≠a)'}")

def main():
    """Funci√≥n principal."""
    print("üîç Verificador de Conexi√≥n MySQL - Plataforma de Bienestar Emocional")
    print("=" * 70)
    
    show_configuration()
    
    # Ejecutar todas las pruebas
    tests = [
        ("Conexi√≥n b√°sica a MySQL", test_mysql_connection),
        ("Existencia de base de datos", test_database_exists),
        ("Conexi√≥n a base de datos", test_database_connection),
        ("Integridad de datos", test_data_integrity)
    ]
    
    results = []
    for test_name, test_func in tests:
        print(f"\n{'='*50}")
        print(f"üß™ {test_name}")
        print('='*50)
        result = test_func()
        results.append((test_name, result))
    
    # Resumen final
    print(f"\n{'='*70}")
    print("üìã RESUMEN DE PRUEBAS")
    print('='*70)
    
    passed = 0
    for test_name, result in results:
        status = "‚úÖ PAS√ì" if result else "‚ùå FALL√ì"
        print(f"{status} - {test_name}")
        if result:
            passed += 1
    
    print(f"\nüéØ Resultado: {passed}/{len(results)} pruebas pasaron")
    
    if passed == len(results):
        print("\nüéâ ¬°Todas las pruebas pasaron! La base de datos est√° lista.")
        return True
    else:
        print("\n‚ö†Ô∏è Algunas pruebas fallaron. Revisa la configuraci√≥n.")
        print("\nüí° Sugerencias:")
        print("   1. Verifica que MySQL est√© ejecut√°ndose")
        print("   2. Revisa las credenciales en config.env")
        print("   3. Ejecuta init_database.py para crear las tablas")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
